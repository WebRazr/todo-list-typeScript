{"version":3,"sources":["components/btn-sort/btn-sort.tsx","components/list/item-list/item-list.tsx","components/list/todo-list.tsx","components/search-panel/search-panel.tsx","components/top-bar/input-panel.tsx","components/App.tsx","redux/rootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["BtnFilter","useState","done","setDone","nDone","setNDone","dispatch","useDispatch","value","useSelector","state","filter","todoData","useEffect","doneTasks","el","length","btnSort","name","label","map","styleB","style","margin","type","className","onClick","onFilterChange","key","ItemList","dataList","date","important","text","time","id","edit","setEdit","editText","setEditText","styleTask","setStyleTask","saveTask","editT","checked","onChange","htmlFor","width","marginTop","onKeyDown","e","currentTarget","window","confirm","connect","dataReducer","addTask","newTaskR","arrayTodo","datarr","items","search","item","toLowerCase","indexOf","searchList","searchTask","setSearchTask","placeholder","newTask","setNewTask","sendTask","data","alert","nowDate","Date","year","getFullYear","setDataDayNow","num","day","getDate","month","getMonth","hours","getHours","minute","getMinutes","objForArray","Math","floor","random","getMilliseconds","display","aria-label","aria-describedby","App","initialState","Boolean","location","hostname","match","store","createStore","action","obj","idx","findIndex","newArray","slice","doneObj","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a410f255.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { typeState } from \"./../../redux/rootReducer\";\r\n\r\ntype BtnType = {\r\n  name: string;\r\n  label: string;\r\n};\r\n\r\nconst BtnFilter: React.FC = () => {\r\n  const [done, setDone] = useState<number>(0);\r\n  const [nDone, setNDone] = useState<number>(0);\r\n  const dispatch = useDispatch();\r\n  const onFilterChange = (name: string) => {\r\n    dispatch({ type: \"FILTER_LIST\", filter: name });\r\n  };\r\n  const value = useSelector((state: typeState) => state.filter);\r\n  const todoData = useSelector((state: typeState) => state.todoData);\r\n  useEffect(() => {\r\n    if (todoData === null) {\r\n      setNDone(0);\r\n    } else {\r\n      let doneTasks = todoData.filter((el) => el.done !== true);\r\n      setNDone(doneTasks.length);\r\n    }\r\n    if (todoData === null) {\r\n      setDone(0);\r\n    } else {\r\n      let doneTasks = todoData.filter((el) => el.done === true);\r\n      setDone(doneTasks.length);\r\n    }\r\n  }, [todoData]);\r\n  const buttons: BtnType[] = [\r\n    { name: \"all\", label: \"Все\" },\r\n    { name: \"active\", label: `Активные ${nDone}` },\r\n    { name: \"done\", label: `Готовые ${done}` },\r\n  ];\r\n  const btnSort = buttons.map(({ label, name }) => {\r\n    let styleB = name === value;\r\n    return (\r\n      <button\r\n        style={{ margin: \"0 5px\" }}\r\n        type=\"button\"\r\n        className={styleB ? \"btn btn-dark\" : \"btn btn-outline-dark\"}\r\n        onClick={() => onFilterChange(name)}\r\n        key={name}\r\n      >\r\n        {label}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div>{btnSort}</div>;\r\n};\r\n\r\nexport default BtnFilter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { typeArrayData } from \"./../../../redux/rootReducer\";\r\nimport \"./item-list.scss\";\r\n\r\ntype typeItemList = {\r\n  dataList: typeArrayData;\r\n};\r\n\r\nconst ItemList: React.FC<typeItemList> = ({ dataList }) => {\r\n  const { date, important, text, time, done, id } = dataList;\r\n  const [edit, setEdit] = useState<boolean>(false);\r\n  const [editText, setEditText] = useState<string>(text);\r\n  const [styleTask, setStyleTask] = useState<string>(\"task\");\r\n\r\n  const dispatch = useDispatch();\r\n  const removeTask = () => {\r\n    const conf = window.confirm(`Вы действительно хотите удалить?`);\r\n    if (conf) {\r\n      return dispatch({ type: \"REMOVE_TASK\", id: id });\r\n    }\r\n  };\r\n  const doneTask = () => dispatch({ type: \"DONE_TASK\", id: id });\r\n  const saveTask = () => {\r\n    dispatch({ type: \"EDIT_TASK\", editT: editText, id: id });\r\n    setEdit(false);\r\n  };\r\n  const inputNewTask = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setEditText(e.currentTarget.value);\r\n  };\r\n  const _handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (e.key === \"Enter\") {\r\n      saveTask();\r\n    }\r\n  };\r\n  const importantTask = () => dispatch({ type: \"IMPORTANT_TASK\", id: id });\r\n\r\n  useEffect(() => {\r\n    if (important === false) {\r\n      setStyleTask(\"task\");\r\n    } else {\r\n      setStyleTask(\"task addStyleColor\");\r\n    }\r\n  }, [important]);\r\n  useEffect(() => {\r\n    if (done === false) {\r\n      setStyleTask(\"task\");\r\n    } else {\r\n      setStyleTask(`${styleTask} op`);\r\n    }\r\n  }, [done]);\r\n  return (\r\n    <div className={styleTask}>\r\n      <div className={\"firstBlock\"}>\r\n        <div className={\"checkBlock\"}>\r\n          <div className=\" custom-control custom-switch styleDone\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"custom-control-input\"\r\n              id={`customSwitch${id}`}\r\n              checked={done}\r\n              onChange={doneTask}\r\n            />\r\n\r\n            <label\r\n              className=\"custom-control-label\"\r\n              htmlFor={`customSwitch${id}`}\r\n            >\r\n              {done ? <p>Выполнено</p> : <p>В ожидании</p>}\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"custom-control custom-switch\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"custom-control-input\"\r\n              id={`important${id}`}\r\n              checked={important}\r\n              onChange={importantTask}\r\n            />\r\n\r\n            <label className=\"custom-control-label\" htmlFor={`important${id}`}>\r\n              {important ? <p>важно</p> : <p>не важно</p>}\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={\"textDateBlock\"}>\r\n          <div className={\"textBlock\"}>\r\n            {edit ? (\r\n              <input\r\n                style={{ width: \"90%\", marginTop: \"-20px\" }}\r\n                className=\" form-control\"\r\n                type=\"text\"\r\n                value={editText}\r\n                onKeyDown={_handleKeyDown}\r\n                onChange={inputNewTask}\r\n              />\r\n            ) : (\r\n              <p>{text}</p>\r\n            )}\r\n          </div>\r\n          <div className={\"DateBlock\"}>\r\n            <p>{time}</p>\r\n            <p>{date}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={\"btn-style\"}>\r\n        {edit ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"size-btn-t btn btn-primary\"\r\n            onClick={saveTask}\r\n          >\r\n            <div className=\"divSave\"></div>\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"size-btn-t btn btn-success\"\r\n            onClick={() => setEdit(true)}\r\n          >\r\n            <div className=\"divEdit\"></div>\r\n          </button>\r\n        )}\r\n        <button\r\n          type=\"button\"\r\n          className=\"size-btn-t btn btn-danger\"\r\n          onClick={removeTask}\r\n        >\r\n          <div className=\"divDelete\"></div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { typeState, typeArrayData } from \"./../../redux/rootReducer\";\r\nimport ItemList from \"./item-list/item-list\";\r\ntype typeList = {\r\n  dataReducer: typeState;\r\n};\r\n\r\nconst TodoList: React.FC<typeList> = ({ dataReducer }) => {\r\n  let datarr: any = \"\";\r\n  if (dataReducer.todoData === null) {\r\n    datarr = \"\";\r\n  } else {\r\n    const filter = (\r\n      items: typeArrayData[],\r\n      filter: string\r\n    ): typeArrayData[] => {\r\n      switch (filter) {\r\n        case \"all\":\r\n          return items;\r\n        case \"active\":\r\n          return items.filter((el) => el.done === false);\r\n        case \"done\":\r\n          return items.filter((el) => el.done === true);\r\n        default:\r\n          return items;\r\n      }\r\n    };\r\n    const filterSearch = (arrayTodo: typeArrayData[]) => {\r\n      if (dataReducer.search === \"\") {\r\n        return arrayTodo;\r\n      } else {\r\n        return arrayTodo.filter((item) => {\r\n          return (\r\n            item.text.toLowerCase().indexOf(dataReducer.search.toLowerCase()) >\r\n            -1\r\n          );\r\n        });\r\n      }\r\n    };\r\n\r\n    datarr = filterSearch(filter(dataReducer.todoData, dataReducer.filter)).map(\r\n      (el) => {\r\n        return <ItemList key={el.id} dataList={el} />;\r\n      }\r\n    );\r\n  }\r\n  if (datarr.length === 0) {\r\n    return <div style={{ marginTop: \"20px\" }}>записей не найдено</div>;\r\n  }\r\n  return <div>{datarr}</div>;\r\n};\r\nfunction mapStateToProps(state: typeState): { dataReducer: typeState } {\r\n  return { dataReducer: state };\r\n}\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    addTask: (newTaskR: typeArrayData) =>\r\n      dispatch({ type: \"ADD_TASK\", newTaskR: newTaskR }),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\ntype typePropsSearchPanel = {\r\n  searchList: (searchTask: string) => any;\r\n};\r\nconst SearchPanel: React.FC<typePropsSearchPanel> = ({ searchList }) => {\r\n  const [searchTask, setSearchTask] = useState<string>(\"\");\r\n  type sendTaskType = (data: string) => void;\r\n  const sendText: sendTaskType = (data) => {\r\n    searchList(data);\r\n  };\r\n  const inputText = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setSearchTask(e.currentTarget.value);\r\n  };\r\n  useEffect(() => {\r\n    sendText(searchTask);\r\n  }, [searchTask]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        style={{ width: \"240px\" }}\r\n        className=\"topSearc form-control\"\r\n        type=\"text\"\r\n        value={searchTask}\r\n        onChange={inputText}\r\n        placeholder={\"начните вводить для поиска\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    searchList: (searchTask: string) =>\r\n      dispatch({ type: \"SEARCH_TASK\", text: searchTask }),\r\n  };\r\n}\r\nexport default connect(null, mapDispatchToProps)(SearchPanel);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { typeState, typeArrayData } from \"../../redux/rootReducer\";\r\ntype typePropsSearchPanel = {\r\n  dataReducer: typeState;\r\n  addTask: (newTaskR: typeArrayData) => any;\r\n};\r\nconst InputPanel: React.FC<typePropsSearchPanel> = ({\r\n  dataReducer,\r\n  addTask,\r\n}) => {\r\n  const [newTask, setNewTask] = useState<string>(\"\");\r\n  const [nDone, setNDone] = useState<number>(0);\r\n  type sendTaskType = (data: string) => void;\r\n  const sendTask: sendTaskType = (data) => {\r\n    if (data === \"\") {\r\n      alert(\"Поле ввода пустое\");\r\n    } else {\r\n      let nowDate: Date = new Date();\r\n      let year: number = nowDate.getFullYear();\r\n\r\n      const setDataDayNow = (num: string) => {\r\n        if (num.length === 1) {\r\n          return \"0\" + num;\r\n        } else {\r\n          return num;\r\n        }\r\n      };\r\n      let day: string = setDataDayNow(nowDate.getDate() + \"\");\r\n      let month: string = setDataDayNow(nowDate.getMonth() + 1 + \"\");\r\n      let hours: string = setDataDayNow(nowDate.getHours() + \"\");\r\n      let minute: string = setDataDayNow(nowDate.getMinutes() + \"\");\r\n\r\n      let objForArray: typeArrayData = {\r\n        date: `${day}.${month}.${year}`,\r\n        time: `${hours}:${minute}`,\r\n        text: data,\r\n        id: Math.floor(Math.random() * 100) + nowDate.getMilliseconds(),\r\n        done: false,\r\n        important: false,\r\n      };\r\n      addTask(objForArray);\r\n    }\r\n    setNewTask(\"\");\r\n  };\r\n  const inputNewTask = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setNewTask(e.currentTarget.value);\r\n  };\r\n  const _handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (e.key === \"Enter\") {\r\n      sendTask(newTask);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (dataReducer.todoData === null) {\r\n      setNDone(0);\r\n    } else {\r\n      setNDone(dataReducer.todoData.length);\r\n    }\r\n  }, [dataReducer]);\r\n  return (\r\n    <div style={{ marginTop: \"20px\", display: \"flex\" }}>\r\n      <div className=\"input-group mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\" form-control\"\r\n          placeholder=\"введите новую задачу\"\r\n          aria-label=\"Recipient's username\"\r\n          aria-describedby=\"basic-addon2\"\r\n          value={newTask}\r\n          onKeyDown={_handleKeyDown}\r\n          onChange={inputNewTask}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button\r\n            className=\"btn  btn-info\"\r\n            onClick={() => sendTask(newTask)}\r\n            type=\"button\"\r\n          >\r\n            Добавить\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"compliteDone\">\r\n        <p> задач {nDone}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction mapStateToProps(state: typeState): { dataReducer: typeState } {\r\n  return { dataReducer: state };\r\n}\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    addTask: (newTaskR: typeArrayData) =>\r\n      dispatch({ type: \"ADD_TASK\", newTaskR: newTaskR }),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputPanel);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BtnFilter from \"./btn-sort/btn-sort\";\nimport TodoList from \"./list/todo-list\";\nimport SearchPanel from \"./search-panel/search-panel\";\nimport InputPanel from \"./top-bar/input-panel\";\nimport \"./list/item-list/item-list.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputPanel />\n      <div className={\"flexSF\"}>\n        <SearchPanel />\n        <BtnFilter />\n      </div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","export type typeArrayData = {\r\n  id: number;\r\n  text: string;\r\n  time: string;\r\n  date: string;\r\n  done: boolean;\r\n  important: boolean;\r\n};\r\nexport type typeState = {\r\n  todoData: Array<typeArrayData> | null;\r\n  filter: \"all\" | \"done\" | \"active\";\r\n  search: string;\r\n};\r\nlet initialState: typeState = {\r\n  // todoData: null,\r\n  todoData: [\r\n    {\r\n      text: \"Test task\",\r\n      time: \"15:57\",\r\n      date: \"05.10.2020\",\r\n      done: false,\r\n      important: false,\r\n      id: 5,\r\n    },\r\n  ],\r\n  filter: \"all\",\r\n  search: \"\",\r\n};\r\n\r\nexport default function (\r\n  state: typeState = initialState,\r\n  action: any\r\n): typeState {\r\n  switch (action.type) {\r\n    case \"ADD_TASK\":\r\n      let obj: typeArrayData = action.newTaskR;\r\n\r\n      if (state.todoData === null) {\r\n        return {\r\n          ...state,\r\n          todoData: [obj],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        todoData: [obj, ...state.todoData],\r\n      };\r\n    case \"REMOVE_TASK\":\r\n      if (state.todoData !== null) {\r\n        const idx: number = state.todoData.findIndex(\r\n          (el) => el.id === action.id\r\n        );\r\n        const newArray: typeArrayData[] = [\r\n          ...state.todoData.slice(0, idx),\r\n          ...state.todoData.slice(idx + 1),\r\n        ];\r\n        return {\r\n          ...state,\r\n          todoData: newArray,\r\n        };\r\n      }\r\n    case \"DONE_TASK\":\r\n      if (state.todoData !== null) {\r\n        const idx: number = state.todoData.findIndex(\r\n          (el) => el.id === action.id\r\n        );\r\n        let obj = state.todoData[idx];\r\n        const doneObj: typeArrayData = {\r\n          id: obj.id,\r\n          text: obj.text,\r\n          time: obj.time,\r\n          date: obj.date,\r\n          done: !obj.done,\r\n          important: obj.important,\r\n        };\r\n        const newArray: typeArrayData[] = [\r\n          ...state.todoData.slice(0, idx),\r\n          doneObj,\r\n          ...state.todoData.slice(idx + 1),\r\n        ];\r\n        return {\r\n          ...state,\r\n          todoData: newArray,\r\n        };\r\n      }\r\n    case \"IMPORTANT_TASK\":\r\n      if (state.todoData !== null) {\r\n        const idx: number = state.todoData.findIndex(\r\n          (el) => el.id === action.id\r\n        );\r\n        let obj = state.todoData[idx];\r\n        const doneObj: typeArrayData = {\r\n          id: obj.id,\r\n          text: obj.text,\r\n          time: obj.time,\r\n          date: obj.date,\r\n          done: obj.done,\r\n          important: !obj.important,\r\n        };\r\n        const newArray: typeArrayData[] = [\r\n          ...state.todoData.slice(0, idx),\r\n          doneObj,\r\n          ...state.todoData.slice(idx + 1),\r\n        ];\r\n        return {\r\n          ...state,\r\n          todoData: newArray,\r\n        };\r\n      }\r\n    case \"EDIT_TASK\":\r\n      if (state.todoData !== null) {\r\n        const idx: number = state.todoData.findIndex(\r\n          (el) => el.id === action.id\r\n        );\r\n        let obj = state.todoData[idx];\r\n        const doneObj: typeArrayData = {\r\n          id: obj.id,\r\n          /////вставить текст\r\n          text: action.editT,\r\n          time: obj.time,\r\n          date: obj.date,\r\n          done: obj.done,\r\n          important: obj.important,\r\n        };\r\n        const newArray: typeArrayData[] = [\r\n          ...state.todoData.slice(0, idx),\r\n          doneObj,\r\n          ...state.todoData.slice(idx + 1),\r\n        ];\r\n        return {\r\n          ...state,\r\n          todoData: newArray,\r\n        };\r\n      }\r\n    case \"FILTER_LIST\":\r\n      return {\r\n        ...state,\r\n        filter: action.filter,\r\n      };\r\n    case \"SEARCH_TASK\":\r\n      return {\r\n        ...state,\r\n        search: action.text,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/rootReducer\";\nimport * as serviceWorker from \"./serviceWorker\";\nconst store = createStore(rootReducer);\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}